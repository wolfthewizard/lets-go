@startuml

namespace core {

    namespace interfaces {

        interface ICommandDirector {
            int CreateNewBotGame()
            int CreateNewMultiplayerGame()
            ResponseDTO TryToMove(MoveDTO: move)
            void CancelGame(int: leftPlayerId)
        }

        interface IMoveExecutorService {
            ResponseDTO: executeMove(MoveDTO: moveDTO)
        }

        interface IGameManagerService {
            void CreateNewGame(int: firstPlayerId)
            void CreateNewGame(int: firstPlayerId, int: secondPlayerId)
            void CancelGame(int: leftPlayerId)
        }

        interface IMoveValidator {
            boolean validateSuicide(Board: board, Move: move)
            boolean validateKO(Board: oldBoard, Board: currentBoard, Move: move)
            boolean validateVacant(Board: board, Move: move)
            ' mb more
        }

        interface IGameRepository {
            Game getGame(int playerId)
            void updateGameBoard(int, List<Change>)
        }

        interface IMoveHelper {

            List<Coordinates> getChainStartingWithCords(Occupancy[][] board, int boardSizeValue, Coordinates startingCords, Occupancy occupancy);
            List<Coordinates> getNeighbouringCords(Occupancy[][] board, int boardSizeValue, Coordinates coordinates, Occupancy occupancy);

            boolean chainContains(List<Coordinates> chain, Coordinates coordinates);
            boolean doesChainBorderWith(Occupancy[][] board, int boardSizeValue, List<Coordinates> chain, Occupancy occupancy);
            boolean isChainWithoutBreaths(Occupancy[][] board, int boardSizeValue, List<Coordinates> chain);
        }

        interface IGameArbitrator {

            Winner determineWinner(Occupancy[][] board, int boardSizeValue);
            MoveResponseType toMoveResponseType(Winner winner, Color playerColor);
        }

        interface IMovePerformer {

            int performMove(Coordinates moveCoordinates, Color playerColor, Occupancy[][] potentialState, int boardSizeValue, List<Change> changes);
        }
    }

    namespace helpers {

        class MoveHelper implements core.interfaces.IMoveHelper {

            + List<Coordinates> getChainStartingWithCords(Occupancy[][] board, int boardSizeValue, Coordinates startingCords, Occupancy occupancy);
            + boolean chainContains(List<Coordinates> chain, Coordinates coordinates);
            + boolean doesChainBorderWith(Occupancy[][] board, int boardSizeValue, List<Coordinates> chain, Occupancy occupancy);
            + boolean isChainWithoutBreaths(Occupancy[][] board, int boardSizeValue, List<Coordinates> chain);
            + List<Coordinates> getNeighbouringCords(Occupancy[][] board, int boardSizeValueValue, Coordinates coordinates, Occupancy occupancy);
            - void chainBuildingRecursive(Occupancy[][] board, int boardSizeValue, Coordinates coordinates, Occupancy occupancy, List<Coordinates> chain);
        }

        class GameArbitrator implements core.interfaces.IGameArbitrator {

            - IMoveHelper moveHelper;

            + Winner determineWinner(Occupancy[][] board, int boardSizeValue);
            +MoveResponseType toMoveResponseType(Winner winner, Color playerColor);
        }
        GameArbitrator --> core.interfaces.IMoveHelper

        class MoveValidator implements core.interfaces.IMoveValidator {
                 +boolean validateSuicide(Board: board, Move: move)
                 +boolean validateKO(Board: oldBoard, Board: currentBoard, Move: move)
                 +boolean validateVacant(Board: board, Move: move)
                ' mb more
        }

        class MovePerformer implements core.interfaces.IMovePerformer {

            - IMoveHelper moveHelper;

            + int performMove(Coordinates moveCoordinates, Color playerColor, Occupancy[][] potentialState, int boardSizeValue, List<Change> changes)
            - int removeChainFromBoard(Occupancy[][] potentialState, List<Change> changes, List<Coordinates> chain)
            - void changeBoard(Occupancy[][] potentialState, List<Change> changes, Coordinates coordinates, Occupancy occupancy)
        }
        MovePerformer --> core.interfaces.IMoveHelper
    }

    namespace services {

        class MoveExecutorService implements core.interfaces.IMoveExecutorService{
            -gameRepository : IGameRepository
            -moveValidator : IMoveValidator
            -moveHelper : IMoveHelper
            -gameArbitrator : IGameArbitrator

            +ResponseDTO executeMove(MoveDTO: moveDTO)
            - boolean preMoveValidation(Occupancy[][] board, Coordinates move);
            - boolean postMoveValidation(int boardSizeValue, Occupancy[][] potentialState,
                                               Occupancy[][] previousTurnState, List<Change> changes);
        }
        MoveExecutorService --> core.interfaces.IGameRepository
        MoveExecutorService --> core.interfaces.IMoveValidator
        MoveExecutorService --> core.interfaces.IMovePerformer
        MoveExecutorService --> core.interfaces.IGameArbitrator

        class GameManagerService implements core.interfaces.IGameManagerService{
            -IGameRepository: gameRepository

            +void CreateNewGame(int: firstPlayerId)
            +void CreateNewGame(int: firstPlayerId, int: secondPlayerId)
            +void CancelGame(int: leftPlayerId)
        }
        GameManagerService --> core.interfaces.IGameRepository
    }

    class CommandDirector implements core.interfaces.ICommandDirector {
        -moveExecutorService : IMoveExecutorService
        -gameManagerService : IGameManagerService

        +int CreateNewBotGame()
        +int CreateNewMultiplayerGame()
        +ResponseDTO TryToMove(MoveDTO: move)
        +void CancelGame(int: leftPlayerId)
    }
    CommandDirector --> core.interfaces.IMoveExecutorService
    CommandDirector --> core.interfaces.IGameManagerService

    ' moze zamiast dzielic na 2 metody podzielimy na dwie klasy wtedy dwie referencje w executorze, albo jeszcze jednak klasa ktora to razem sklada taka mini facada


    namespace model {
        namespace enums {

            enum Color {
                WHITE
                BLACK
            }

            enum Occupancy extends Color {
                WHITE
                BLACK
                EMPTY
            }

            enum BoardSize {
                NINE
                THIRTEEN
                NINETEEN
            }

            enum MoveType {
                MOVE
                PASS
            }

            enum ResponseStatus {
                OK
                INVALID_MOVE
                UNAUTHORIZED_MOVE
            }
        }

        class Board {

            fields : Occupancy[][]
            boardSize : BoardSize

            int getSize()
        }

        class Game {
            gameId : int
            boards : Board[]
            black : Player
            white : Player
            whoseTurn : Color

            +int getId()
            +Board[] getBoards()
        }

        class Coordinates {
            +x : int
            +y : int
        }

        class ActionDTO {
            +playerId : int
            +actionType : MoveType
            +cords : Coordinates
        }

        class Move {
            +player : Color
            +cords : Coordinates
        }

        class ResponseDTO {
            +status : ResponseStatus
            +changes : List<Change>
            +whitesCaptives : int
            +blacksCaptives : int
        }

        class Player {
            +playerId : int
            +amountOfCaptives : int
        }

        class Change {
            +occupancy : Occupancy
            +cords : Coordinates
        }

        MoveDTO "1" o-- "1" Move
        Move "1" *-- "1" core.model.enums.MoveType
        ResponseDTO "1" *-- "1" core.model.enums.ResponseStatus
        ResponseDTO "1" o-- "1...*" Change
        Change "1" *-- "1" core.model.enums.Occupancy
        Change "1" o-- "1" Coordinates
        Game "1" o-- "1, 2, 3" Board
        Game "1" o-- "2" Player
        Game "1" *-- "1" core.model.enums.Color
        Board "1" *-- "*" core.model.enums.Occupancy
        Board "1" *-- "1" core.model.enums.BoardSize
    }
}

namespace infrastructure {

    'albo zapis do pliku albo musi byc singleton
    class GameRepository implements core.interfaces.IGameRepository {
        -games : List<Game>

        +void cancelGame(int gameId, Color winner)
        +int createNewGame()
        +Board getBoard(int)
        +void updateBoard(int, List<Change>)
    }
}

namespace main {

    namespace helpers {

        namespace actionhandlers {

            abstract class AbstractActionHandler {

                # GameInfo gameInfo;
                # ClientConnectionThread currentClient;
                # IJsonParser jsonParser;
                # ICommandDirector commandDirector;

                + void handleAction()

                # abstract void handleNullGameInfo();
                # abstract void handleNotNullGameInfo();
            }
            AbstractActionHandler --> main.ClientConnectionThread
            AbstractActionHandler --> main.helpers.jsonparser.IJsonParser
            AbstractActionHandler --> core.interfaces.ICommandDirector

            class LeaveGameActionHandler extends AbstractActionHandler {

                - IClientsManager clientsManager;
                - IPlayerValidator playerValidator;

                # void handleNullGameInfo()
                # void handleNotNullGameInfo()
            }
            LeaveGameActionHandler --> main.IClientsManager
            LeaveGameActionHandler --> main.helpers.playervalidator.IPlayerValidator

            class MoveExecuteActionHandler extends AbstractActionHandler {

                - IClientsManager clientsManager;
                - Coordinates coordinates;

                # void handleNullGameInfo()
                # void handleNotNullGameInfo()
            }
            MoveExecuteActionHandler --> main.IClientsManager

            class StartGameActionHandler extends AbstractActionHandler {

                - int threadId;
                - BoardSize boardSize;
                - IPlayerValidator playerValidator;
                - IClientsManager clientsManager;
                - Random randomGenerator;

                # void handleNullGameInfo()
                # void handleNotNullGameInfo()
            }
            StartGameActionHandler --> main.helpers.playervalidator.IPlayerValidator
            StartGameActionHandler --> main.IClientsManager
        }

        namespace actionprocesser {

            interface IActionProcesser {

                void processAction(String action, int id);

                void closeAllConnections();
            }

            class ActionProcesser implements IActionProcesser {

                - final IJsonParser jsonParser;
                - final IPlayerValidator playerValidator;
                - final ICommandDirector commandDirector;
                - final IClientsManager clientsManager;
                - AbstractActionHandler actionHandler;

                + void processAction(String message, int threadId)
                + void closeAllConnections()
            }
            ActionProcesser --> main.helpers.jsonparser.IJsonParser
            ActionProcesser --> main.helpers.playervalidator.IPlayerValidator
            ActionProcesser --> core.interfaces.ICommandDirector
            ActionProcesser --> main.IClientsManager
            ActionProcesser --> main.helpers.actionhandlers.AbstractActionHandler
        }

        namespace jsonparser {



            class JsonParser implements main.helpers.playervalidator.IJsonParser {

                - Gson jsonParser;

                + ActionDTO parseJsonToAction(String json)
                + String parseResponseToJson(ResponseDTO responseDTO)
            }
        }

        namespace playervalidator {

            interface IJsonParser {

                ActionDTO parseJsonToAction(String json);

                String parseResponseToJson(ResponseDTO responseDTO);
            }

            interface IPlayerValidator {
                void addNewGame(int whiteId, int blackId, int gameId);

                void removeGame(int gameId);

                void playerLeft(int playerId);

                GameInfo getGameInfo(int playerId);

                Integer getWaitingPlayerId(BoardSize boardSize);

                void addWaitingPlayer(BoardSize boardSize, int playerId);
            }

            class PlayerValidator implements main.helpers.playervalidator.IPlayerValidator {

                - ArrayList<GameWithPlayers> games = new ArrayList<>();
                - final HashMap<BoardSize, Integer> waitingPlayers = new HashMap<>();

                + void addNewGame(int whiteId, int blackId, int gameId)
                + void removeGame(int gameId)
                + void playerLeft(int playerId)
                + GameInfo getGameInfo(int playerId)
                + Integer getWaitingPlayerId(BoardSize boardSize)
                + void addWaitingPlayer(BoardSize boardSize, int playerId)
            }
        }
    }

    namespace model {

        class GameInfo {
            - MoveIdentity moveIdentity;
            - int secondPlayerId;

            + int getSecondPlayerId()
            + MoveIdentity getMoveIdentity()
        }

        class GameWithPlayers {
            private final int whiteId;
            private final int blackId;
            private final int gameId;

            public int getWhiteId()

            public int getBlackId()

            public int getGameId()
        }
    }

    class ClientConnectionThread extends Thread {

        - int id;
        - Socket client;
        - BufferedReader inputReader;
        - PrintWriter outputWriter;
        - IActionProcesser actionProcesser;

        + void run()
        + void beginAction(String firstResponse)
        + void completeAction(String secondResponse)
        + int getThreadId()
        + void closeConnection()
    }
    ClientConnectionThread --> main.helpers.actionprocesser.IActionProcesser

    interface IClientsManager {

        void addClient(ClientConnectionThread clientConnectionThread);

        ArrayList<ClientConnectionThread> getAllClients();

        ClientConnectionThread getClientWithId(int threadId);
    }

    class ClientsManager implements IClientsManager {

        - ArrayList<ClientConnectionThread> clients

        + void addClient(ClientConnectionThread clientConnectionThread)
        + ArrayList<ClientConnectionThread> getAllClients()
        + ClientConnectionThread getClientWithId(int threadId)
    }
    ClientsManager --> "*" ClientConnectionThread

    class ServerListenerThread extends Thread{

        private ServerSocket server;
        private IClientsManager clientsManager;
        private IActionProcesser actionProcesser;

        public void run()
        public void closeConnection()
    }
    ServerListenerThread --> IClientsManager
    ServerListenerThread --> main.helpers.actionprocesser.IActionProcesser
}

'CommunicationBase --> "receives" MoveDTO
'CommunicationBase --> "sends" ResponseDTO
'CommunicationBaseImpl "1" o-- "1" Core
'CoreImpl "1" o-- "1" GameStore
'GameStoreImpl "1" o-- "0...*" Game



@enduml