@startuml

namespace main{
    interface CommunicationBase{

        ResponseDTO orderMove(MoveDTO)
    }

    class CommunicationBaseImpl implements CommunicationBase{

        core : Core

        ResponseDTO orderMove(MoveDTO)
    }
}

namespace core{
    namespace model{
        namespace enums{

            enum Color {
                WHITE
                BLACK
            }

            enum Occupancy extends Color {
                WHITE
                BLACK
                EMPTY
            }

            enum BoardSize {
                NINE
                THIRTEEN
                NINETEEN
            }

            enum MoveType {
                MOVE
                PASS
            }

            enum ResponseStatus {
                OK
                INVALID_MOVE
                UNAUTHORIZED_MOVE
            }
        }



        interface Board

        Board : int getSize()


        class BoardImpl implements Board

        BoardImpl : fields : Occupancy[][]
        BoardImpl : boardSize : BoardSize

        BoardImpl : int getSize()

        class GameImpl implements Game

        GameImpl : gameId : int
        GameImpl : boards : Board[]
        GameImpl : black : Player
        GameImpl : white : Player
        GameImpl : whoseTurn : Color

        GameImpl : int getId()
        GameImpl : Board[] getBoards()

        interface Game

        Game : int getId()
        'this method returns array of 3 boards: current and 2 before it
        Game : Board[] getBoards()



        class Coordinates{
            +x : int
            +y : int
        }

        class MoveDTO{
            +playerId : int
            +move : Move
        }

        class Move{
            +moveType : MoveType
            +cords : Coordinates
        }

        class ResponseDTO{
            +status : ResponseStatus
            +changes : List<Change>
            +whitesCaptives : int
            +blacksCaptives : int
        }


        class Player{
            +playerId : int
            +amountOfCaptives : int
        }

        class Change{
            +occupancy : Occupancy
            +cords : Coordinates
        }
    }

    namespace Interfaces{

    }
    'singleton class
    class MoveValidationCenter

    MoveValidationCenter : boolean validateMove(Board board, )

    interface Core

    Core : -isItPlayersTurn(int)
    'todo


    class CoreImpl implements Core
    CoreImpl : gameStore : GameStore
    ' todo

    CoreImpl : -isItPlayersTurn(int)
    ' todo

}

namespace infrastructure{
    interface GameStore{
        +Game getGame(int playerId)
        +void updateGameBoard(int, List<Change>)
    }

    class GameStoreImpl implements GameStore{
        games : List<Game>

        Board getBoard(int)
        void updateBoard(int, List<Change>)
    }

}


CommunicationBase --> "receives" MoveDTO
CommunicationBase --> "sends" ResponseDTO
CommunicationBaseImpl "1" o-- "1" Core
CoreImpl "1" o-- "1" GameStore
GameStoreImpl "1" o-- "0...*" Game
GameImpl "1" o-- "1, 2, 3" Board
GameImpl "1" o-- "2" Player
GameImpl "1" *-- "1" Color
BoardImpl "1" *-- "*" Occupancy
BoardImpl "1" *-- "1" BoardSize
Change "1" *-- "1" Occupancy
Change "1" o-- "1" Coordinates
Core --> "uses" MoveValidationCenter
MoveDTO "1" o-- "1" Move
Move "1" *-- "1" MoveType
ResponseDTO "1" *-- "1" ResponseStatus
ResponseDTO "1" o-- "1...*" Change

@enduml