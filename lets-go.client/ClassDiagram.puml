@startuml

package contract {

    package enums {

        enum ActionType {
            STARTMULTIPLAYERGAME,
            STARTBOTGAME,
            LEAVEGAME,
            DOMOVE,
            PASSMOVE
        }

        enum BoardSize {
            NINE,
            THIRTEEN,
            NINETEEN
        }

        enum Occupancy {
            BLACK,
            WHITE,
            EMPTY
        }

        enum ResponseType {

            MOVE_EXECUTED,
            INVALID_MOVE,
            SUCCESS,
            CANT_CREATE_GAME,
            SERVER_ERROR,
            PLAYER_LEFT,
            GAMEWON,
            GAMELOST
        }
    }

    class ActionDTO {

        - ActionType actionType;
        - BoardSize boardSize;
        - Coordinates coordinates;

        + Coordinates getCoordinates()

        + BoardSize getBoardSize()

        + ActionType getActionType()
    }

    class Change {
        - Occupancy occupancy;
        - Coordinates coordinates;

        + Occupancy getOccupancy()

        + Coordinates getCoordinates()
    }

    class Coordinates {
        - int x;
        - int y;

        + int getX()

        + int getY()
    }

    class Prisoners {

        - int yourPrisoners;
        - int enemyPrisoners;

        + void swapPrisoners()

        + int getEnemyPrisoners()

        + int getYourPrisoners()
    }

    class ResponseDTO {
        - ResponseType responseType;
        - ArrayList<Change> changes;
        - Prisoners prisoners;

        + ArrayList<Change> getChanges()

        + ResponseType getResponseType()

        + Prisoners getPrisoners()
    }
}

package core {

    package serversender {

        interface IJsonParser {
            ResponseDTO parseJsonToResponse(String json);

            String parseActionToJson(ActionDTO actionDTO);
        }

        interface IServerCommunicator {

            void sendStartGameMessage(boolean isMultiplayerGame, BoardSize boardSize);

            void sendMoveMessage(Coordinates coordinates);

            void sendMovePassMessage();

            void sendLeaveGameMessage();

            void shutDownConnection();
        }

        class JsonParser implements IJsonParser {

            Gson jsonParser;

            + ResponseDTO parseJsonToResponse(String json)

            + String parseActionToJson(ActionDTO actionDTO)
        }

        interface OnServerResponseListener {

            void responseReceived(ResponseDTO responseDTO);
        }

        class ServerCommunicator implements IServerCommunicator {

            - IJsonParser jsonParser;
            - static Socket socket;
            - static PrintWriter outputWriter;
            - static BufferedReader inputReader;
            - boolean connectionClosed = false;
            - OnServerResponseListener serverResponseListener;
            - Thread serverResponseAwaiter;

            - static void restoreConnection()

            + void sendStartGameMessage(boolean isMultiplayerGame, BoardSize boardSize)

            + void sendMoveMessage(Coordinates coordinates)

            + void sendMovePassMessage()

            + void sendLeaveGameMessage()

            - void sendMessage(ActionDTO actionDTO)

            - void waitAndPassResponse()

            + void shutDownConnection()
        }

        class ServerResponseListener implements OnServerResponseListener {

            - IFrontendManager frontendManager;

            + void responseReceived(ResponseDTO responseDTO)
        }
    }

    interface IFrontendManager {

        void moveExecuted(ArrayList<Change> changes, Prisoners prisoners);
        void invalidMove();
        void cantCreateGame();
        void success();
        void serverError();
        void playerLeft();
        void gameWon();
        void gameLost();
    }

    class FrontendManager implements IFrontendManager {

        - Game gameBoardWindow;
        - boolean playersTurn;

        + void moveExecuted(ArrayList<Change> changes, Prisoners prisoners)

        + void invalidMove()

        + void cantCreateGame()

        + void success()

        + void serverError()

        + void playerLeft()

        + void gameWon()

        + void gameLost()

        - void switchWhoseMove()
    }
}

package frontend {

    class BoardPanel extends JPanel {

        - TileButton[][] tiles;

        + int getDimension()

        + void enforceChanges(ArrayList<Change> changes)
    }

    interface Game {

        void clearServerResponse();
        void setOpponentsCaptives(int nOfCaptives);
        void setPlayersCaptives(int nOfCaptives);
        void signalPlayersMove();
        void signalOpponentsMove();
        void signalInvalidMove();
        void signalOpponentsLeave();
        void signalWin();
        void signalLose();
        void openNewGameCreation();
        void closeGame();
        void exitApp();
        void signalFailedToCreateGame();
        void signalServerFailed();
        void enforceChanges(ArrayList<Change> changes);
    }

    class GameBoardWindow extends JFrame implements Game {

        - JLabel serverResponseLabel;
        - JLabel whoseMoveLabel;
        - JLabel opponentsCaptivesLabel;
        - JLabel playersCaptivesLabel;

        - BoardPanel boardPanel;

        + void clearServerResponse()

        + void setOpponentsCaptives(int nOfCaptives)

        + void setPlayersCaptives(int nOfCaptives)

        + void signalPlayersMove()

        + void signalOpponentsMove()

        + void signalInvalidMove()

        + void signalOpponentsLeave()

        + void signalWin()

        + void signalLose()

        + void openNewGameCreation()

        + void closeGame()

        + void exitApp()

        + void signalFailedToCreateGame()

        + void signalServerFailed()

        + void enforceChanges(ArrayList<Change> changes)
    }

    class GameSettingsWindow extends JFrame {

    }

    class IconFlyweight {

        - static ImageIcon emptyTile
        - static ImageIcon blackTile
        - static ImageIcon whiteTile

        + static ImageIcon getIcon(Occupancy type)
    }

    class PassButtonActionListener implements ActionListener {

        - static PassButtonActionListener instance

        - ServerCommunicator serverCommunicator;

        + static PassButtonActionListener getInstance()

        + void setServerCommunicator(ServerCommunicator serverCommunicator)

        + void actionPerformed(ActionEvent actionEvent)
    }

    class TileButtonActionListener implements ActionListener {

        - static TileButtonActionListener instance

        - ServerCommunicator serverCommunicator;

        + static TileButtonActionListener getInstance()

        + void setServerCommunicator(ServerCommunicator serverCommunicator)

        + void actionPerformed(ActionEvent actionEvent)
    }

    class TileButton extends JButton {

        - static int ICON_SIZE

        - Coordinates cords;

        + void setImg(Occupancy type)

        + Coordinates getCoordinates()

        + int getDimension()
    }
}

@enduml